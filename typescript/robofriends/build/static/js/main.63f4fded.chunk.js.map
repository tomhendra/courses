{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","count","color","onClick","PureComponent","Header","nextProps","nextState","components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.63f4fded.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?size=200x200`} alt='robots' />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card\n                            key={i}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input \n                aria-label='Search Robots'\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robots' \n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n    <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n        {props.children}\n    </div>\n    )\n};\n\nexport default Scroll;","import React,  { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oops! That is not good</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React, { PureComponent } from 'react'; \n// PureComponent is built in component which will only re-render when its props change \n// the only caveat is that it does 'shallow comparison' of props, so deeply nested objects may miss some prop updates\n// shouldComponentUpdate has more control but is another function to be run - performance penalty. Don't overuse and always test performance!\n\nclass CounterButton extends PureComponent {\n    constructor() {\n        super();\n        this.state = {\n            count: 0\n        }\n    }\n\n    // Using Component instead of PureComponent...\n    // shouldComponentUpdate(nextProps, nextState) {\n    //     if (this.state.count !== nextState.count) {\n    //         return true;\n    //     }\n    //     return false;\n    // }\n\n    updateCount = () => {\n        this.setState(state => {\n            return { count: state.count + 1 }\n        })\n    }\n    \n    render() {\n        return (\n            <button color={this.props.color} onClick={this.updateCount}>\n                Count: {this.state.count}\n            </button>\n        );\n    }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n    render() {\n        return (\n            <div>\n                <h1 className='f1'>RoboFriends</h1>\n                <CounterButton color={'red'} />\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from '../components/Header';\n\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = (state) => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots()\n    }\n\n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\n        })\n\n        return isPending ?\n        (\n            <div className='tc'>\n                <Header />\n                <h2 className='f2'>Loading...</h2>\n            </div>\n        ) \n        : \n        (\n            <div className='tc'>\n                <Header />\n                <SearchBox searchChange={onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filteredRobots}/>\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n            // return { ...state, {searchField: action.payload} }; - using object destructuring with spread operator also works\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default: \n            return state;\n    }   \n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}